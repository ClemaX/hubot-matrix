{"version":3,"file":"matrix.esm.js","sources":["../src/matrix.ts"],"sourcesContent":["import { Robot, Adapter, Envelope, TextMessage, User } from \"hubot\";\nimport {\n  ClientEvent,\n  ISendEventResponse,\n  MatrixClient,\n  RoomEvent,\n  RoomMemberEvent,\n} from \"matrix-js-sdk\";\n\nimport sdk from \"matrix-js-sdk\";\nimport request from \"request\";\nimport sizeOf from \"image-size\";\nimport { makeHtmlNotice, makeNotice } from \"matrix-js-sdk/lib/content-helpers.js\";\nimport { Parser, HtmlRenderer } from \"commonmark\";\n\n/**\n * The Matrix-specific metadata available about a message.\n */\nexport type MatrixMessageMetadata = {\n  readonly threadId?: string;\n  readonly interpretMarkdown?: boolean;\n};\n\n/**\n * Represents a regular Hubot TextMessage with additional Matrix metadata.\n */\nexport class MatrixMessage extends TextMessage {\n  constructor(\n    user: User,\n    text: string,\n    id: string,\n    public metadata: MatrixMessageMetadata\n  ) {\n    super(user, text, id);\n  }\n}\n\nexport class Matrix extends Adapter {\n  public client: MatrixClient | undefined;\n  private user_id: string | undefined;\n  private access_token: string | undefined;\n  private device_id: string | undefined;\n\n  private commonMarkReader = new Parser();\n  private commonMarkRenderer = new HtmlRenderer({ safe: true, softbreak: \"<br />\" });\n\n  constructor(private robot: Robot<Matrix>) {\n    super(robot);\n    this.robot.logger.info(\"Constructor\");\n  }\n\n  handleUnknownDevices(err: { devices: { [x: string]: any } }) {\n    return (() => {\n      let result = [];\n      for (var stranger in err.devices) {\n        var devices = err.devices[stranger];\n        result.push(\n          (() => {\n            let result1 = [];\n            for (let device in devices) {\n              this.robot.logger.info(\n                `Acknowledging ${stranger}'s device ${device}`\n              );\n              result1.push(this.client?.setDeviceKnown(stranger, device));\n            }\n            return result1;\n          })()\n        );\n      }\n      return result;\n    })();\n  }\n\n  send(envelope: Envelope, ...strings: any[]) {\n    return strings.map((str) => this.sendThreaded(envelope, undefined, str));\n  }\n\n  async resolveRoom(room: string): Promise<string> {\n    const roomFromId = this.client?.getRoom(room)\n    if (roomFromId !== null && roomFromId !== undefined) {\n      return room\n    }\n\n    const roomIdFromAlias = (await this.client?.getRoomIdForAlias(room))?.room_id\n    if (roomIdFromAlias === undefined) {\n      throw new Error(`Failed to resolve specified room: ${room}.`)\n    }\n\n    return roomIdFromAlias\n  }\n\n  async sendThreaded(\n    envelope: Envelope,\n    threadId: string | undefined,\n    message: string\n  ): Promise<ISendEventResponse | undefined> {\n    const resolvedRoom = await this.resolveRoom(envelope.room)\n\n    const interpretMarkdown =\n      \"metadata\" in (envelope.message ?? {})\n        ? (envelope.message as MatrixMessage).metadata.interpretMarkdown ?? true\n        : true;\n\n    const finalMessage = interpretMarkdown\n      ? makeHtmlNotice(\n          message,\n          this.commonMarkRenderer.render(this.commonMarkReader.parse(message))\n        )\n      : makeNotice(message);\n\n    this.robot.logger.info(`Sending to ${envelope.room} (resolved to ${resolvedRoom}): ${message}`);\n    if (/^(f|ht)tps?:\\/\\//i.test(message)) {\n      return this.sendURL(envelope, message);\n    }\n    if (threadId !== undefined) {\n      return this.client\n        ?.sendMessage(resolvedRoom, threadId, finalMessage)\n        ?.catch((err) => {\n          if (err.name === \"UnknownDeviceError\") {\n            this.handleUnknownDevices(err);\n            return this.client?.sendMessage(\n              resolvedRoom,\n              threadId,\n              finalMessage\n            );\n          }\n        });\n    }\n    return this.client\n      ?.sendMessage(resolvedRoom, finalMessage)\n      .catch((err) => {\n        if (err.name === \"UnknownDeviceError\") {\n          this.handleUnknownDevices(err);\n          return this.client?.sendMessage(resolvedRoom, finalMessage);\n        }\n      });\n  }\n\n  async emote(envelope: Envelope, ...strings: string[]) {\n    const resolvedRoom = await this.resolveRoom(envelope.room)\n\n    return Array.from(strings).map((str) =>\n      this.client?.sendEmoteMessage(resolvedRoom, str).catch((err) => {\n        if (err.name === \"UnknownDeviceError\") {\n          this.handleUnknownDevices(err);\n          return this.client?.sendEmoteMessage(resolvedRoom, str);\n        }\n      })\n    );\n  }\n\n  reply(envelope: Envelope, ...strings: string[]) {\n    const threadId =\n      \"metadata\" in envelope.message\n        ? (envelope.message as MatrixMessage).metadata.threadId\n        : undefined;\n\n    return Array.from(strings).map((str) =>\n      this.sendThreaded(envelope, threadId, `${envelope.user.name}: ${str}`)\n    );\n  }\n\n  topic(envelope: Envelope, ...strings: string[]) {\n    return Array.from(strings).map((str) =>\n      this.client?.sendStateEvent(\n        envelope.room,\n        \"m.room.topic\",\n        {\n          topic: str,\n        },\n        \"\"\n      )\n    );\n  }\n\n  async sendURL(\n    envelope: Envelope,\n    url: string\n  ): Promise<ISendEventResponse | undefined> {\n    const resolvedRoom = await this.resolveRoom(envelope.room)\n\n    this.robot.logger.info(`Downloading ${url}`);\n    return new Promise((resolve, reject) => {\n      request({ url, encoding: null }, (error, response, body) => {\n        if (error) {\n          this.robot.logger.info(`Request error: ${JSON.stringify(error)}`);\n          reject(error);\n        } else if (response.statusCode === 200) {\n          let info: sdk.IImageInfo;\n          try {\n            let dims = sizeOf(body);\n            this.robot.logger.info(\n              `Image has dimensions ${JSON.stringify(dims)}, size ${\n                body.length\n              }`\n            );\n            if (dims.type === \"jpg\") {\n              dims.type = \"jpeg\";\n            }\n            info = {\n              mimetype: `image/${dims.type}`,\n              h: dims.height,\n              w: dims.width,\n              size: body.length,\n            };\n            resolve(\n              this.client\n                ?.uploadContent(body, {\n                  name: url,\n                  type: info.mimetype,\n                  rawResponse: false,\n                  onlyContentUri: true,\n                })\n                .then((content_uri) => {\n                  return this.client\n                    ?.sendImageMessage(resolvedRoom, content_uri, info, url)\n                    .catch((err) => {\n                      if (err.name === \"UnknownDeviceError\") {\n                        this.handleUnknownDevices(err);\n                        return this.client?.sendImageMessage(\n                          resolvedRoom,\n                          content_uri,\n                          info,\n                          url\n                        );\n                      }\n                    });\n                })\n            );\n          } catch (error1) {\n            error = error1;\n            this.robot.logger.info(error.message);\n            resolve(this.sendThreaded(envelope, undefined, ` ${url}`));\n          }\n        }\n      });\n    });\n  }\n\n  run() {\n    this.robot.logger.info(`Run ${this.robot.name}`);\n    let client = sdk.createClient({\n      baseUrl: process.env.HUBOT_MATRIX_HOST_SERVER || \"https://matrix.org\",\n      request: request,\n    });\n    return client.login(\n      \"m.login.password\",\n      {\n        user: process.env.HUBOT_MATRIX_USER || this.robot.name,\n        password: process.env.HUBOT_MATRIX_PASSWORD,\n      },\n      (\n        err: any,\n        data: { user_id: string; access_token: string; device_id: string }\n      ) => {\n        if (err) {\n          this.robot.logger.error(err);\n          return;\n        }\n        this.user_id = data.user_id;\n        this.access_token = data.access_token;\n        this.device_id = data.device_id;\n        this.robot.logger.info(\n          `Logged in ${this.user_id} on device ${this.device_id}`\n        );\n        this.client = sdk.createClient({\n          baseUrl: process.env.HUBOT_MATRIX_HOST_SERVER || \"https://matrix.org\",\n          accessToken: this.access_token,\n          userId: this.user_id,\n          deviceId: this.device_id,\n          request,\n        });\n        this.client?.on(ClientEvent.Sync, (state) => {\n          switch (state) {\n            case \"PREPARED\":\n              this.robot.logger.info(\n                `Synced ${this.client?.getRooms().length} rooms`\n              );\n              // We really don't want to let people set the display name to something other than the bot\n              // name because the bot only reacts to it's own name.\n              const currentDisplayName = this.client?.getUser(\n                this.user_id ?? \"\"\n              )?.displayName;\n              if (this.robot.name !== currentDisplayName) {\n                this.robot.logger.info(\n                  `Setting display name to ${this.robot.name}`\n                );\n                this.client?.setDisplayName(this.robot.name, () => {});\n              }\n              return this.emit(\"connected\");\n          }\n        });\n        this.client?.on(\n          RoomEvent.Timeline,\n          (event, room, toStartOfTimeline) => {\n            if (\n              event.getType() === \"m.room.message\" &&\n              toStartOfTimeline === false\n            ) {\n              this.client?.setPresence({ presence: \"online\" });\n              let id = event.getId();\n              let message = event.getContent();\n              let name = event.getSender();\n              let user = this.robot.brain.userForId(name);\n              user.room = room.getCanonicalAlias() ?? room.roomId;\n              if (name !== this.user_id) {\n                this.robot.logger.info(\n                  `Received message: ${JSON.stringify(message)} in room: ${\n                    user.room\n                  }, from: ${user.name} (${user.id}).`\n                );\n                if (message.msgtype === \"m.text\") {\n                  const messageThreadId = event.threadRootId ?? id;\n\n                  this.robot.receive(\n                    new MatrixMessage(user, message.body, id, {\n                      threadId: messageThreadId,\n                    })\n                  );\n                }\n                if (\n                  message.msgtype !== \"m.text\" ||\n                  message.body.indexOf(this.robot.name) !== -1\n                ) {\n                  return this.client?.sendReadReceipt(event);\n                }\n              }\n            }\n          }\n        );\n        this.client?.on(RoomMemberEvent.Membership, async (event, member) => {\n          if (\n            member.membership === \"invite\" &&\n            member.userId === this.user_id\n          ) {\n            await this.client?.joinRoom(member.roomId);\n            this.robot.logger.info(`Auto-joined ${member.roomId}`);\n          }\n        });\n        return this.client?.startClient({ initialSyncLimit: 0 });\n      }\n    );\n  }\n}\n\nexport function use(robot: Robot<any>): Matrix {\n  return new Matrix(robot);\n}\n"],"names":["MatrixMessage","TextMessage","constructor","user","text","id","metadata","Matrix","Adapter","robot","client","user_id","access_token","device_id","commonMarkReader","Parser","commonMarkRenderer","HtmlRenderer","safe","softbreak","logger","info","handleUnknownDevices","err","result","stranger","devices","push","result1","device","setDeviceKnown","send","envelope","strings","map","str","sendThreaded","undefined","resolveRoom","room","roomFromId","getRoom","roomIdFromAlias","getRoomIdForAlias","room_id","Error","threadId","message","resolvedRoom","interpretMarkdown","finalMessage","makeHtmlNotice","render","parse","makeNotice","test","sendURL","sendMessage","catch","name","emote","Array","from","sendEmoteMessage","reply","topic","sendStateEvent","url","Promise","resolve","reject","request","encoding","error","response","body","JSON","stringify","statusCode","dims","sizeOf","length","type","mimetype","h","height","w","width","size","uploadContent","rawResponse","onlyContentUri","then","content_uri","sendImageMessage","error1","run","sdk","createClient","baseUrl","process","env","HUBOT_MATRIX_HOST_SERVER","login","HUBOT_MATRIX_USER","password","HUBOT_MATRIX_PASSWORD","data","accessToken","userId","deviceId","on","ClientEvent","Sync","state","getRooms","currentDisplayName","getUser","displayName","setDisplayName","emit","RoomEvent","Timeline","event","toStartOfTimeline","getType","setPresence","presence","getId","getContent","getSender","brain","userForId","getCanonicalAlias","roomId","msgtype","messageThreadId","threadRootId","receive","indexOf","sendReadReceipt","RoomMemberEvent","Membership","member","membership","joinRoom","startClient","initialSyncLimit","use"],"mappings":"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"}