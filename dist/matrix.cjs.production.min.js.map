{"version":3,"file":"matrix.cjs.production.min.js","sources":["../src/matrix.ts"],"sourcesContent":["import { Robot, Adapter, Envelope, TextMessage, User } from \"hubot\";\nimport {\n  ClientEvent,\n  MatrixClient,\n  RoomEvent,\n  RoomMemberEvent,\n} from \"matrix-js-sdk\";\n\nimport sdk from \"matrix-js-sdk\";\nimport request from \"request\";\nimport sizeOf from \"image-size\";\nimport { makeHtmlNotice, makeNotice } from \"matrix-js-sdk/lib/content-helpers\";\nimport { Parser, HtmlRenderer } from \"commonmark\";\n\n/**\n * The Matrix-specific metadata available about a message.\n */\nexport type MatrixMessageMetadata = {\n  readonly threadId?: string;\n  readonly interpretMarkdown?: boolean;\n};\n\n/**\n * Represents a regular Hubot TextMessage with additional Matrix metadata.\n */\nexport class MatrixMessage extends TextMessage {\n  constructor(\n    user: User,\n    text: string,\n    id: string,\n    public metadata: MatrixMessageMetadata\n  ) {\n    super(user, text, id);\n  }\n}\n\nexport class Matrix extends Adapter {\n  public client: MatrixClient | undefined;\n  private user_id: string | undefined;\n  private access_token: string | undefined;\n  private device_id: string | undefined;\n\n  private commonMarkReader = new Parser();\n  private commonMarkRenderer = new HtmlRenderer({ safe: true });\n\n  constructor(private robot: Robot<Matrix>) {\n    super(robot);\n    this.robot.logger.info(\"Constructor\");\n  }\n\n  handleUnknownDevices(err: { devices: { [x: string]: any } }) {\n    return (() => {\n      let result = [];\n      for (var stranger in err.devices) {\n        var devices = err.devices[stranger];\n        result.push(\n          (() => {\n            let result1 = [];\n            for (let device in devices) {\n              this.robot.logger.info(\n                `Acknowledging ${stranger}'s device ${device}`\n              );\n              result1.push(this.client?.setDeviceKnown(stranger, device));\n            }\n            return result1;\n          })()\n        );\n      }\n      return result;\n    })();\n  }\n\n  send(envelope: Envelope, ...strings: any[]) {\n    return strings.map((str) => this.sendThreaded(envelope, undefined, str));\n  }\n\n  sendThreaded(\n    envelope: Envelope,\n    threadId: string | undefined,\n    message: string\n  ): any {\n    const interpretMarkdown =\n      (\"metadata\" in (envelope.message ?? {}) &&\n        (envelope.message as MatrixMessage).metadata.interpretMarkdown) ??\n      true;\n\n    const finalMessage = interpretMarkdown\n      ? makeHtmlNotice(\n          message,\n          this.commonMarkRenderer.render(this.commonMarkReader.parse(message))\n        )\n      : makeNotice(message);\n\n    this.robot.logger.info(`Sending to ${envelope.room}: ${message}`);\n    if (/^(f|ht)tps?:\\/\\//i.test(message)) {\n      return this.sendURL(envelope, message);\n    }\n    if (threadId !== undefined) {\n      return this.client\n        ?.sendMessage(envelope.room, threadId, finalMessage)\n        ?.catch((err) => {\n          if (err.name === \"UnknownDeviceError\") {\n            this.handleUnknownDevices(err);\n            return this.client?.sendMessage(\n              envelope.room,\n              threadId,\n              finalMessage\n            );\n          }\n        });\n    }\n    return this.client\n      ?.sendMessage(envelope.room, finalMessage)\n      .catch((err) => {\n        if (err.name === \"UnknownDeviceError\") {\n          this.handleUnknownDevices(err);\n          return this.client?.sendMessage(envelope.room, finalMessage);\n        }\n      });\n  }\n\n  emote(envelope: Envelope, ...strings: string[]) {\n    return Array.from(strings).map((str) =>\n      this.client?.sendEmoteMessage(envelope.room, str).catch((err) => {\n        if (err.name === \"UnknownDeviceError\") {\n          this.handleUnknownDevices(err);\n          return this.client?.sendEmoteMessage(envelope.room, str);\n        }\n      })\n    );\n  }\n\n  reply(envelope: Envelope, ...strings: string[]) {\n    const threadId =\n      \"metadata\" in envelope.message\n        ? (envelope.message as MatrixMessage).metadata.threadId\n        : undefined;\n\n    return Array.from(strings).map((str) =>\n      this.sendThreaded(envelope, threadId, `${envelope.user.name}: ${str}`)\n    );\n  }\n\n  topic(envelope: Envelope, ...strings: string[]) {\n    return Array.from(strings).map((str) =>\n      this.client?.sendStateEvent(\n        envelope.room,\n        \"m.room.topic\",\n        {\n          topic: str,\n        },\n        \"\"\n      )\n    );\n  }\n\n  sendURL(envelope: Envelope, url: string) {\n    this.robot.logger.info(`Downloading ${url}`);\n    return request({ url, encoding: null }, (error, response, body) => {\n      if (error) {\n        return this.robot.logger.info(\n          `Request error: ${JSON.stringify(error)}`\n        );\n      } else if (response.statusCode === 200) {\n        let info: sdk.IImageInfo;\n        try {\n          let dims = sizeOf(body);\n          this.robot.logger.info(\n            `Image has dimensions ${JSON.stringify(dims)}, size ${body.length}`\n          );\n          if (dims.type === \"jpg\") {\n            dims.type = \"jpeg\";\n          }\n          info = {\n            mimetype: `image/${dims.type}`,\n            h: dims.height,\n            w: dims.width,\n            size: body.length,\n          };\n          return this.client\n            ?.uploadContent(body, {\n              name: url,\n              type: info.mimetype,\n              rawResponse: false,\n              onlyContentUri: true,\n            })\n            .then((content_uri) => {\n              return this.client\n                ?.sendImageMessage(envelope.room, content_uri, info, url)\n                .catch((err) => {\n                  if (err.name === \"UnknownDeviceError\") {\n                    this.handleUnknownDevices(err);\n                    return this.client?.sendImageMessage(\n                      envelope.room,\n                      content_uri,\n                      info,\n                      url\n                    );\n                  }\n                });\n            });\n        } catch (error1) {\n          error = error1;\n          this.robot.logger.info(error.message);\n          return this.send(envelope, ` ${url}`);\n        }\n      }\n    });\n  }\n\n  run() {\n    this.robot.logger.info(`Run ${this.robot.name}`);\n    let client = sdk.createClient({\n      baseUrl: process.env.HUBOT_MATRIX_HOST_SERVER || \"https://matrix.org\",\n      request: request,\n    });\n    return client.login(\n      \"m.login.password\",\n      {\n        user: process.env.HUBOT_MATRIX_USER || this.robot.name,\n        password: process.env.HUBOT_MATRIX_PASSWORD,\n      },\n      (\n        err: any,\n        data: { user_id: string; access_token: string; device_id: string }\n      ) => {\n        if (err) {\n          this.robot.logger.error(err);\n          return;\n        }\n        this.user_id = data.user_id;\n        this.access_token = data.access_token;\n        this.device_id = data.device_id;\n        this.robot.logger.info(\n          `Logged in ${this.user_id} on device ${this.device_id}`\n        );\n        this.client = sdk.createClient({\n          baseUrl: process.env.HUBOT_MATRIX_HOST_SERVER || \"https://matrix.org\",\n          accessToken: this.access_token,\n          userId: this.user_id,\n          deviceId: this.device_id,\n          request,\n        });\n        this.client?.on(ClientEvent.Sync, (state) => {\n          switch (state) {\n            case \"PREPARED\":\n              this.robot.logger.info(\n                `Synced ${this.client?.getRooms().length} rooms`\n              );\n              // We really don't want to let people set the display name to something other than the bot\n              // name because the bot only reacts to it's own name.\n              const currentDisplayName = this.client?.getUser(\n                this.user_id ?? \"\"\n              )?.displayName;\n              if (this.robot.name !== currentDisplayName) {\n                this.robot.logger.info(\n                  `Setting display name to ${this.robot.name}`\n                );\n                this.client?.setDisplayName(this.robot.name, () => {});\n              }\n              return this.emit(\"connected\");\n          }\n        });\n        this.client?.on(\n          RoomEvent.Timeline,\n          (event, room, toStartOfTimeline) => {\n            if (\n              event.getType() === \"m.room.message\" &&\n              toStartOfTimeline === false\n            ) {\n              this.client?.setPresence({ presence: \"online\" });\n              let id = event.getId();\n              let message = event.getContent();\n              let name = event.getSender();\n              let user = this.robot.brain.userForId(name);\n              user.room = room.roomId;\n              if (name !== this.user_id) {\n                this.robot.logger.info(\n                  `Received message: ${JSON.stringify(message)} in room: ${\n                    user.room\n                  }, from: ${user.name} (${user.id}).`\n                );\n                if (message.msgtype === \"m.text\") {\n                  const messageThreadId = event.threadRootId ?? id;\n\n                  this.receive(\n                    new MatrixMessage(user, message.body, id, {\n                      threadId: messageThreadId,\n                    })\n                  );\n                }\n                if (\n                  message.msgtype !== \"m.text\" ||\n                  message.body.indexOf(this.robot.name) !== -1\n                ) {\n                  return this.client?.sendReadReceipt(event);\n                }\n              }\n            }\n          }\n        );\n        this.client?.on(RoomMemberEvent.Membership, async (event, member) => {\n          if (\n            member.membership === \"invite\" &&\n            member.userId === this.user_id\n          ) {\n            await this.client?.joinRoom(member.roomId);\n            this.robot.logger.info(`Auto-joined ${member.roomId}`);\n          }\n        });\n        return this.client?.startClient({ initialSyncLimit: 0 });\n      }\n    );\n  }\n}\n\nexport function use(robot: Robot<any>): Matrix {\n  return new Matrix(robot);\n}\n"],"names":["MatrixMessage","_TextMessage","user","text","id","metadata","_this","call","this","_inheritsLoose","TextMessage","Matrix","_Adapter","robot","_this2","client","user_id","access_token","device_id","commonMarkReader","Parser","commonMarkRenderer","HtmlRenderer","safe","logger","info","_proto","prototype","handleUnknownDevices","err","_this3","result","stranger","devices","push","result1","device","_this3$client","setDeviceKnown","send","envelope","_this4","_len","arguments","length","strings","Array","_key","map","str","sendThreaded","undefined","threadId","message","_ref","_envelope$message","_this$client2","_this$client","_this$client$sendMess","_this5","finalMessage","interpretMarkdown","makeHtmlNotice","render","parse","makeNotice","room","test","sendURL","sendMessage","_this5$client","name","_this5$client2","emote","_this6","_len2","_key2","from","_this6$client","sendEmoteMessage","_this6$client2","reply","_this7","_len3","_key3","topic","_this8","_len4","_key4","_this8$client","sendStateEvent","url","_this9","request","encoding","error","response","body","JSON","stringify","statusCode","_this9$client","dims","sizeOf","type","mimetype","h","height","w","width","size","uploadContent","rawResponse","onlyContentUri","then","content_uri","_this9$client2","sendImageMessage","_this9$client3","error1","run","_this10","sdk","createClient","baseUrl","process","env","HUBOT_MATRIX_HOST_SERVER","login","HUBOT_MATRIX_USER","password","HUBOT_MATRIX_PASSWORD","data","_this10$client","_this10$client5","_this10$client8","_this10$client10","accessToken","userId","deviceId","on","ClientEvent","Sync","state","_this10$client2","_this10$client3","_this10$client3$getUs","_this10$user_id","getRooms","_this10$client4","currentDisplayName","getUser","displayName","setDisplayName","emit","RoomEvent","Timeline","event","toStartOfTimeline","getType","_this10$client6","setPresence","presence","getId","getContent","getSender","brain","userForId","roomId","msgtype","_event$threadRootId","messageThreadId","threadRootId","receive","_this10$client7","indexOf","sendReadReceipt","RoomMemberEvent","Membership","_ref2","_regeneratorRuntime","mark","_callee","member","_this10$client9","wrap","_context","prev","next","membership","joinRoom","stop","_x","_x2","apply","startClient","initialSyncLimit","Adapter"],"mappings":"u5NAyBA,IAAaA,EAAb,SAAAC,GACE,SAAAD,EACEE,EACAC,EACAC,EACOC,GAA+B,IAAAC,EAAA,OAEtCA,EAAAL,EAAAM,KAAAC,KAAMN,EAAMC,EAAMC,IAAlBI,MAFOH,cAA+B,EAA/BC,EAAQD,SAARA,EAA+BC,CAGvC,CARH,OAAAG,EAAAT,EAAAC,GAAAD,CAAA,CAAA,CAAmCU,eAWtBC,EAAb,SAAAC,GASE,SAAAD,EAAoBE,GAAoB,IAAAC,EAAA,OACtCA,EAAAF,EAAAL,KAAAC,KAAMK,IAANL,MADkBK,WAAoB,EAAAC,EARjCC,YAQiC,EAAAD,EAPhCE,aAOgC,EAAAF,EANhCG,kBAMgC,EAAAH,EALhCI,eAKgC,EAAAJ,EAHhCK,iBAAmB,IAAIC,EAAAA,OAGSN,EAFhCO,mBAAqB,IAAIC,eAAa,CAAEC,MAAM,IAElCT,EAAKD,MAALA,EAElBC,EAAKD,MAAMW,OAAOC,KAAK,eAFeX,CAGvC,CAZHL,EAAAE,EAAAC,GAAA,IAAAc,EAAAf,EAAAgB,UAAA,OAAAD,EAcEE,qBAAA,SAAqBC,GAAsC,IAAAC,EAAAtB,KACzD,OAAQ,WACN,IAAIuB,EAAS,GACb,IAAK,IAAIC,KAAYH,EAAII,QAAS,CAChC,IAAIA,EAAUJ,EAAII,QAAQD,GAC1BD,EAAOG,KACJ,WACC,IAAIC,EAAU,GACd,IAAK,IAAIC,KAAUH,EAAS,CAAA,IAAAI,EAC1BP,EAAKjB,MAAMW,OAAOC,KAAlB,iBACmBO,EADnB,aACwCI,GAExCD,EAAQD,KAAK,OAAAG,EAAAP,EAAKf,aAAL,EAAAsB,EAAaC,eAAeN,EAAUI,GACpD,CACD,OAAOD,CART,CAAC,GAWJ,CACD,OAAOJ,CACR,CAlBO,IAfZL,EAoCEa,KAAA,SAAKC,GAAqC,IAAA,IAAAC,EAAAjC,KAAAkC,EAAAC,UAAAC,OAAdC,EAAc,IAAAC,MAAAJ,EAAA,EAAAA,EAAA,EAAA,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAdF,EAAcE,EAAA,GAAAJ,UAAAI,GACxC,OAAOF,EAAQG,KAAI,SAACC,GAAD,OAASR,EAAKS,aAAaV,OAAUW,EAAWF,EAAhD,KArCvBvB,EAwCEwB,aAAA,SACEV,EACAY,EACAC,GAAe,IAAAC,EAAAC,EAAAC,EAkBaC,EAAAC,EAlBbC,EAAAnD,KAOToD,SAJHN,EAAA,aAAmC,OAAnCC,EAAef,EAASa,SAAWE,EAAA,KACjCf,EAASa,QAA0BhD,SAASwD,sBAI7CC,EAAAA,eACET,EACA7C,KAAKa,mBAAmB0C,OAAOvD,KAAKW,iBAAiB6C,MAAMX,KAE7DY,EAAAA,WAAWZ,GAGf,OADA7C,KAAKK,MAAMW,OAAOC,mBAAmBe,EAAS0B,KAA9C,KAAuDb,GACnD,oBAAoBc,KAAKd,GACpB7C,KAAK4D,QAAQ5B,EAAUa,QAEfF,IAAbC,EACF,OAAAK,EAAOjD,KAAKO,gBAAZ2C,EAAOD,EACHY,YAAY7B,EAAS0B,KAAMd,EAAUQ,SADzC,EAAOF,EAEG,OAAA,SAAC7B,GACgC,IAAAyC,EAAvC,GAAiB,uBAAbzC,EAAI0C,KAEN,OADAZ,EAAK/B,qBAAqBC,GAC1B,OAAAyC,EAAOX,EAAK5C,aAAZ,EAAOuD,EAAaD,YAClB7B,EAAS0B,KACTd,EACAQ,EAGL,IAEE,OAAPJ,EAAOhD,KAAKO,aAAL,EAAAyC,EACHa,YAAY7B,EAAS0B,KAAMN,GACtB,OAAA,SAAC/B,GACiC,IAAA2C,EAAvC,GAAiB,uBAAb3C,EAAI0C,KAEN,OADAZ,EAAK/B,qBAAqBC,GAC1B,OAAA2C,EAAOb,EAAK5C,aAAZ,EAAOyD,EAAaH,YAAY7B,EAAS0B,KAAMN,EAElD,KAlFPlC,EAqFE+C,MAAA,SAAMjC,GAAwC,IAAA,IAAAkC,EAAAlE,KAAAmE,EAAAhC,UAAAC,OAAjBC,EAAiB,IAAAC,MAAA6B,EAAA,EAAAA,EAAA,EAAA,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAjB/B,EAAiB+B,EAAA,GAAAjC,UAAAiC,GAC5C,OAAO9B,MAAM+B,KAAKhC,GAASG,KAAI,SAACC,GAAD,IAAA6B,EAAA,OAAA,OAAAA,EAC7BJ,EAAK3D,aADwB,EAC7B+D,EAAaC,iBAAiBvC,EAAS0B,KAAMjB,GAAW,OAAA,SAACpB,GAChB,IAAAmD,EAAvC,GAAiB,uBAAbnD,EAAI0C,KAEN,OADAG,EAAK9C,qBAAqBC,GAC1B,OAAAmD,EAAON,EAAK3D,aAAZ,EAAOiE,EAAaD,iBAAiBvC,EAAS0B,KAAMjB,EAEvD,GAN4B,KAtFnCvB,EAgGEuD,MAAA,SAAMzC,GAAwC,IAAA,IAAA0C,EAAA1E,KACtC4C,GACJ,aAAcZ,EAASa,QAClBb,EAASa,QAA0BhD,SAAS+C,cAC7CD,GAJsCgC,EAAAxC,UAAAC,OAAjBC,EAAiB,IAAAC,MAAAqC,EAAA,EAAAA,EAAA,EAAA,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAjBvC,EAAiBuC,EAAA,GAAAzC,UAAAyC,GAM5C,OAAOtC,MAAM+B,KAAKhC,GAASG,KAAI,SAACC,GAAD,OAC7BiC,EAAKhC,aAAaV,EAAUY,EAAaZ,EAAStC,KAAKqE,KAAvD,KAAgEtB,EADnC,KAtGnCvB,EA2GE2D,MAAA,SAAM7C,GAAwC,IAAA,IAAA8C,EAAA9E,KAAA+E,EAAA5C,UAAAC,OAAjBC,EAAiB,IAAAC,MAAAyC,EAAA,EAAAA,EAAA,EAAA,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAjB3C,EAAiB2C,EAAA,GAAA7C,UAAA6C,GAC5C,OAAO1C,MAAM+B,KAAKhC,GAASG,KAAI,SAACC,GAAD,IAAAwC,EAAA,OAAA,OAAAA,EAC7BH,EAAKvE,aADwB,EAC7B0E,EAAaC,eACXlD,EAAS0B,KACT,eACA,CACEmB,MAAOpC,GAET,GAP2B,KA5GnCvB,EAwHE0C,QAAA,SAAQ5B,EAAoBmD,GAAW,IAAAC,EAAApF,KAErC,OADAA,KAAKK,MAAMW,OAAOC,oBAAoBkE,GAC/BE,UAAQ,CAAEF,IAAAA,EAAKG,SAAU,OAAQ,SAACC,EAAOC,EAAUC,GACxD,GAAIF,EACF,OAAOH,EAAK/E,MAAMW,OAAOC,KACLyE,kBAAAA,KAAKC,UAAUJ,IAGnC,IAAItE,EADC,GAA4B,MAAxBuE,EAASI,WAElB,IAAI,IAAAC,EACEC,EAAOC,UAAON,GAalB,OAZAL,EAAK/E,MAAMW,OAAOC,KACQyE,wBAAAA,KAAKC,UAAUG,GAAeL,UAAAA,EAAKrD,QAE3C,QAAd0D,EAAKE,OACPF,EAAKE,KAAO,QAEd/E,EAAO,CACLgF,SAAQ,SAAWH,EAAKE,KACxBE,EAAGJ,EAAKK,OACRC,EAAGN,EAAKO,MACRC,KAAMb,EAAKrD,QAEb,OAAOyD,EAAAT,EAAK7E,aAAZ,EAAOsF,EACHU,cAAcd,EAAM,CACpB1B,KAAMoB,EACNa,KAAM/E,EAAKgF,SACXO,aAAa,EACbC,gBAAgB,IAEjBC,MAAK,SAACC,GAAe,IAAAC,EACpB,cAAAA,EAAOxB,EAAK7E,eAALqG,EACHC,iBAAiB7E,EAAS0B,KAAMiD,EAAa1F,EAAMkE,GAC9C,OAAA,SAAC9D,GACiC,IAAAyF,EAAvC,GAAiB,uBAAbzF,EAAI0C,KAEN,OADAqB,EAAKhE,qBAAqBC,GACnB,OAAPyF,EAAO1B,EAAK7E,aAAL,EAAAuG,EAAaD,iBAClB7E,EAAS0B,KACTiD,EACA1F,EACAkE,EAGL,GACJ,GAKJ,CAJC,MAAO4B,GAGP,OADA3B,EAAK/E,MAAMW,OAAOC,MADlBsE,EAAQwB,GACqBlE,SACtBuC,EAAKrD,KAAKC,EAAV,IAAwBmD,EAChC,CAEJ,KA3KLjE,EA8KE8F,IAAA,WAAG,IAAAC,EAAAjH,KAMD,OALAA,KAAKK,MAAMW,OAAOC,KAAY,OAAAjB,KAAKK,MAAM0D,MAC5BmD,EAAG,QAACC,aAAa,CAC5BC,QAASC,QAAQC,IAAIC,0BAA4B,qBACjDlC,QAASA,EAAAA,UAEGmC,MACZ,mBACA,CACE9H,KAAM2H,QAAQC,IAAIG,mBAAqBzH,KAAKK,MAAM0D,KAClD2D,SAAUL,QAAQC,IAAIK,wBAExB,SACEtG,EACAuG,GACE,IAAAC,EAAAC,EAAAC,EAAAC,EACF,IAAI3G,EAoFJ,OAhFA4F,EAAKzG,QAAUoH,EAAKpH,QACpByG,EAAKxG,aAAemH,EAAKnH,aACzBwG,EAAKvG,UAAYkH,EAAKlH,UACtBuG,EAAK5G,MAAMW,OAAOC,KACH,aAAAgG,EAAKzG,QAAqB,cAAAyG,EAAKvG,WAE9CuG,EAAK1G,OAAS2G,EAAG,QAACC,aAAa,CAC7BC,QAASC,QAAQC,IAAIC,0BAA4B,qBACjDU,YAAahB,EAAKxG,aAClByH,OAAQjB,EAAKzG,QACb2H,SAAUlB,EAAKvG,UACf2E,QAAAA,EAAAA,UAEF,OAAIwC,EAAAZ,EAAC1G,SAALsH,EAAaO,GAAGC,EAAAA,YAAYC,MAAM,SAACC,GAAS,IAAAC,EAAAC,EAAAC,EAAAC,EAC1C,GACO,aADCJ,EACN,CACEtB,EAAK5G,MAAMW,OAAOC,KACN,kBAAAuH,EAAAvB,EAAK1G,eAALiI,EAAaI,WAAWxG,kBAIpC,IAG4CyG,EAHtCC,SAAqBL,EAAAxB,EAAK1G,SAAR,SAAGkI,EAAaM,QAAb,OACzBJ,EAAA1B,EAAKzG,SADoBmI,EACT,YADSD,EAExBM,YAOH,OANI/B,EAAK5G,MAAM0D,OAAS+E,IACtB7B,EAAK5G,MAAMW,OAAOC,KAAlB,2BAC6BgG,EAAK5G,MAAM0D,MAE3BkF,OAAbJ,EAAA5B,EAAK1G,SAAQ0I,EAAAA,eAAehC,EAAK5G,MAAM0D,MAAM,WAA7C,KAEKkD,EAAKiC,KAAK,YAAjB,KAGOd,OAAbN,EAAAb,EAAK1G,SAAQ6H,EAAAA,GACXe,EAASA,UAACC,UACV,SAACC,EAAO3F,EAAM4F,GACZ,GACsB,mBAApBD,EAAME,YACgB,IAAtBD,EACA,CAAA,IAAAE,EACaC,OAAbD,EAAAvC,EAAK1G,SAAQkJ,EAAAA,YAAY,CAAEC,SAAU,WACrC,IAAI9J,EAAKyJ,EAAMM,QACX9G,EAAUwG,EAAMO,aAChB7F,EAAOsF,EAAMQ,YACbnK,EAAOuH,EAAK5G,MAAMyJ,MAAMC,UAAUhG,GAEtC,GADArE,EAAKgE,KAAOA,EAAKsG,OACbjG,IAASkD,EAAKzG,QAAS,CAMzB,GALAyG,EAAK5G,MAAMW,OAAOC,KACKyE,qBAAAA,KAAKC,UAAU9C,GAClCnD,aAAAA,EAAKgE,KACIhE,WAAAA,EAAKqE,KAHlB,KAG2BrE,EAAKE,GAHhC,MAKwB,WAApBiD,EAAQoH,QAAsB,CAAA,IAAAC,EAC1BC,SAAkBd,EAAAA,EAAMe,gBAAgBxK,EAE9CqH,EAAKoD,QACH,IAAI7K,EAAcE,EAAMmD,EAAQ4C,KAAM7F,EAAI,CACxCgD,SAAUuH,IAGf,CAIC,IAAAG,EAHF,GACsB,WAApBzH,EAAQoH,UACmC,IAA3CpH,EAAQ4C,KAAK8E,QAAQtD,EAAK5G,MAAM0D,MAEhC,OAAA,OAAOuG,EAAArD,EAAK1G,aAAZ,EAAO+J,EAAaE,gBAAgBnB,EAEvC,CACF,KAGL,OAAAtB,EAAAd,EAAK1G,SAALwH,EAAaK,GAAGqC,kBAAgBC,WAAhC,WAAA,MAA4CC,KAAAC,IAAAC,MAAA,SAAAC,EAAOzB,EAAO0B,GAAd,IAAAC,EAAA,OAAAJ,IAAAK,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,GAElB,WAAtBL,EAAOM,YACPN,EAAO7C,SAAWjB,EAAKzG,QAHiB,CAAA0K,EAAAE,KAAA,EAAA,KAAA,CAAA,OAAAF,EAAAE,KAAA,EAKlC,OAAAJ,EAAA/D,EAAK1G,aAAL,EAAAyK,EAAaM,SAASP,EAAOf,QALK,KAAA,EAMxC/C,EAAK5G,MAAMW,OAAOC,KAAlB,eAAsC8J,EAAOf,QANL,KAAA,EAAA,IAAA,MAAA,OAAAkB,EAAAK,OAAA,GAAAT,EAA5C,mLAAA,OAAA,SAAAU,EAAAC,GAAA,OAAAd,EAAAe,MAAA1L,KAAAmC,UAAA,CAAA,CAAA,IASO,OAAP6F,EAAOf,EAAK1G,aAAL,EAAAyH,EAAa2D,YAAY,CAAEC,iBAAkB,IAnFlD3E,EAAK5G,MAAMW,OAAOuE,MAAMlE,EAoF3B,KAnRPlB,CAAA,CAAA,CAA4B0L,gEAwRtB,SAAcxL,GAClB,OAAO,IAAIF,EAAOE,EACnB"}