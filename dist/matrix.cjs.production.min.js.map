{"version":3,"file":"matrix.cjs.production.min.js","sources":["../src/matrix.ts"],"sourcesContent":["import { Robot, Adapter, Envelope, TextMessage, User } from \"hubot\";\nimport {\n  ClientEvent,\n  MatrixClient,\n  RoomEvent,\n  RoomMemberEvent,\n} from \"matrix-js-sdk\";\n\nimport sdk from \"matrix-js-sdk\";\nimport request from \"request\";\nimport sizeOf from \"image-size\";\n\n/**\n * The Matrix-specific metadata available about a message.\n */\nexport type MatrixMessageMetadata = {\n  readonly threadId?: string;\n};\n\n/**\n * Represents a regular Hubot TextMessage with additional Matrix metadata.\n */\nexport class MatrixMessage extends TextMessage {\n  constructor(\n    user: User,\n    text: string,\n    id: string,\n    public metadata: MatrixMessageMetadata\n  ) {\n    super(user, text, id);\n  }\n}\n\nexport class Matrix extends Adapter {\n  public client: MatrixClient | undefined;\n  private user_id: string | undefined;\n  private access_token: string | undefined;\n  private device_id: string | undefined;\n\n  constructor(private robot: Robot<Matrix>) {\n    super(robot);\n    this.robot.logger.info(\"Constructor\");\n  }\n\n  handleUnknownDevices(err: { devices: { [x: string]: any } }) {\n    return (() => {\n      let result = [];\n      for (var stranger in err.devices) {\n        var devices = err.devices[stranger];\n        result.push(\n          (() => {\n            let result1 = [];\n            for (let device in devices) {\n              this.robot.logger.info(\n                `Acknowledging ${stranger}'s device ${device}`\n              );\n              result1.push(this.client?.setDeviceKnown(stranger, device));\n            }\n            return result1;\n          })()\n        );\n      }\n      return result;\n    })();\n  }\n\n  send(envelope: Envelope, ...strings: any[]): any {\n    return strings.map((str) => this.sendThreaded(envelope, undefined, str));\n  }\n\n  sendThreaded(\n    envelope: Envelope,\n    threadId: string | undefined,\n    message: string\n  ): any {\n    this.robot.logger.info(`Sending to ${envelope.room}: ${message}`);\n    if (/^(f|ht)tps?:\\/\\//i.test(message)) {\n      return this.sendURL(envelope, message);\n    }\n    if (threadId !== undefined) {\n      return this.client\n        ?.sendNotice(envelope.room, threadId, message)\n        ?.catch((err) => {\n          if (err.name === \"UnknownDeviceError\") {\n            this.handleUnknownDevices(err);\n            return this.client?.sendNotice(envelope.room, threadId, message);\n          }\n        });\n    }\n    return this.client?.sendNotice(envelope.room, message).catch((err) => {\n      if (err.name === \"UnknownDeviceError\") {\n        this.handleUnknownDevices(err);\n        return this.client?.sendNotice(envelope.room, message);\n      }\n    });\n  }\n\n  emote(envelope: Envelope, ...strings: string[]) {\n    return Array.from(strings).map((str) =>\n      this.client?.sendEmoteMessage(envelope.room, str).catch((err) => {\n        if (err.name === \"UnknownDeviceError\") {\n          this.handleUnknownDevices(err);\n          return this.client?.sendEmoteMessage(envelope.room, str);\n        }\n      })\n    );\n  }\n\n  reply(envelope: Envelope, ...strings: string[]) {\n    let threadId =\n      \"metadata\" in envelope.message\n        ? (envelope.message as MatrixMessage).metadata.threadId\n        : undefined;\n\n    return Array.from(strings).map((str) =>\n      this.sendThreaded(envelope, threadId, `${envelope.user.name}: ${str}`)\n    );\n  }\n\n  topic(envelope: Envelope, ...strings: string[]) {\n    return Array.from(strings).map((str) =>\n      this.client?.sendStateEvent(\n        envelope.room,\n        \"m.room.topic\",\n        {\n          topic: str,\n        },\n        \"\"\n      )\n    );\n  }\n\n  sendURL(envelope: Envelope, url: string) {\n    this.robot.logger.info(`Downloading ${url}`);\n    return request({ url, encoding: null }, (error, response, body) => {\n      if (error) {\n        return this.robot.logger.info(\n          `Request error: ${JSON.stringify(error)}`\n        );\n      } else if (response.statusCode === 200) {\n        let info: sdk.IImageInfo;\n        try {\n          let dims = sizeOf(body);\n          this.robot.logger.info(\n            `Image has dimensions ${JSON.stringify(dims)}, size ${body.length}`\n          );\n          if (dims.type === \"jpg\") {\n            dims.type = \"jpeg\";\n          }\n          info = {\n            mimetype: `image/${dims.type}`,\n            h: dims.height,\n            w: dims.width,\n            size: body.length,\n          };\n          return this.client\n            ?.uploadContent(body, {\n              name: url,\n              type: info.mimetype,\n              rawResponse: false,\n              onlyContentUri: true,\n            })\n            .then((content_uri) => {\n              return this.client\n                ?.sendImageMessage(envelope.room, content_uri, info, url)\n                .catch((err) => {\n                  if (err.name === \"UnknownDeviceError\") {\n                    this.handleUnknownDevices(err);\n                    return this.client?.sendImageMessage(\n                      envelope.room,\n                      content_uri,\n                      info,\n                      url\n                    );\n                  }\n                });\n            });\n        } catch (error1) {\n          error = error1;\n          this.robot.logger.info(error.message);\n          return this.send(envelope, ` ${url}`);\n        }\n      }\n    });\n  }\n\n  run() {\n    this.robot.logger.info(`Run ${this.robot.name}`);\n    let client = sdk.createClient({\n      baseUrl: process.env.HUBOT_MATRIX_HOST_SERVER || \"https://matrix.org\",\n      request: request,\n    });\n    return client.login(\n      \"m.login.password\",\n      {\n        user: process.env.HUBOT_MATRIX_USER || this.robot.name,\n        password: process.env.HUBOT_MATRIX_PASSWORD,\n      },\n      (\n        err: any,\n        data: { user_id: string; access_token: string; device_id: string }\n      ) => {\n        if (err) {\n          this.robot.logger.error(err);\n          return;\n        }\n        this.user_id = data.user_id;\n        this.access_token = data.access_token;\n        this.device_id = data.device_id;\n        this.robot.logger.info(\n          `Logged in ${this.user_id} on device ${this.device_id}`\n        );\n        this.client = sdk.createClient({\n          baseUrl: process.env.HUBOT_MATRIX_HOST_SERVER || \"https://matrix.org\",\n          accessToken: this.access_token,\n          userId: this.user_id,\n          deviceId: this.device_id,\n          request,\n        });\n        this.client?.on(ClientEvent.Sync, (state) => {\n          switch (state) {\n            case \"PREPARED\":\n              this.robot.logger.info(\n                `Synced ${this.client?.getRooms().length} rooms`\n              );\n              // We really don't want to let people set the display name to something other than the bot\n              // name because the bot only reacts to it's own name.\n              const currentDisplayName = this.client?.getUser(\n                this.user_id ?? \"\"\n              )?.displayName;\n              if (this.robot.name !== currentDisplayName) {\n                this.robot.logger.info(\n                  `Setting display name to ${this.robot.name}`\n                );\n                this.client?.setDisplayName(this.robot.name, () => {});\n              }\n              return this.emit(\"connected\");\n          }\n        });\n        this.client?.on(\n          RoomEvent.Timeline,\n          (event, room, toStartOfTimeline) => {\n            if (\n              event.getType() === \"m.room.message\" &&\n              toStartOfTimeline === false\n            ) {\n              this.client?.setPresence({ presence: \"online\" });\n              let id = event.getId();\n              let message = event.getContent();\n              let name = event.getSender();\n              let user = this.robot.brain.userForId(name);\n              user.room = room.roomId;\n              if (name !== this.user_id) {\n                this.robot.logger.info(\n                  `Received message: ${JSON.stringify(message)} in room: ${\n                    user.room\n                  }, from: ${user.name} (${user.id}).`\n                );\n                if (message.msgtype === \"m.text\") {\n                  const messageThreadId = event.threadRootId ?? id;\n\n                  this.receive(\n                    new MatrixMessage(user, message.body, id, {\n                      threadId: messageThreadId,\n                    })\n                  );\n                }\n                if (\n                  message.msgtype !== \"m.text\" ||\n                  message.body.indexOf(this.robot.name) !== -1\n                ) {\n                  return this.client?.sendReadReceipt(event);\n                }\n              }\n            }\n          }\n        );\n        this.client?.on(RoomMemberEvent.Membership, async (event, member) => {\n          if (\n            member.membership === \"invite\" &&\n            member.userId === this.user_id\n          ) {\n            await this.client?.joinRoom(member.roomId);\n            this.robot.logger.info(`Auto-joined ${member.roomId}`);\n          }\n        });\n        return this.client?.startClient({ initialSyncLimit: 0 });\n      }\n    );\n  }\n}\n\nexport function use(robot: Robot<any>): Matrix {\n  return new Matrix(robot);\n}\n"],"names":["MatrixMessage","_TextMessage","user","text","id","metadata","_this","call","this","_inheritsLoose","TextMessage","Matrix","_Adapter","robot","_this2","client","user_id","access_token","device_id","logger","info","_proto","prototype","handleUnknownDevices","err","_this3","result","stranger","devices","push","result1","device","_this3$client","setDeviceKnown","send","envelope","_this4","_len","arguments","length","strings","Array","_key","map","str","sendThreaded","undefined","threadId","message","_this$client2","_this$client","_this$client$sendNoti","_this5","room","test","sendURL","sendNotice","_this5$client","name","_this5$client2","emote","_this6","_len2","_key2","from","_this6$client","sendEmoteMessage","_this6$client2","reply","_this7","_len3","_key3","topic","_this8","_len4","_key4","_this8$client","sendStateEvent","url","_this9","request","encoding","error","response","body","JSON","stringify","statusCode","_this9$client","dims","sizeOf","type","mimetype","h","height","w","width","size","uploadContent","rawResponse","onlyContentUri","then","content_uri","_this9$client2","sendImageMessage","_this9$client3","error1","run","_this10","sdk","createClient","baseUrl","process","env","HUBOT_MATRIX_HOST_SERVER","login","HUBOT_MATRIX_USER","password","HUBOT_MATRIX_PASSWORD","data","_this10$client","_this10$client5","_this10$client8","_this10$client10","accessToken","userId","deviceId","on","ClientEvent","Sync","state","_this10$client2","_this10$client3","_this10$client3$getUs","_this10$user_id","getRooms","_this10$client4","currentDisplayName","getUser","displayName","setDisplayName","emit","RoomEvent","Timeline","event","toStartOfTimeline","getType","_this10$client6","setPresence","presence","getId","getContent","getSender","brain","userForId","roomId","msgtype","_event$threadRootId","messageThreadId","threadRootId","receive","_this10$client7","indexOf","sendReadReceipt","RoomMemberEvent","Membership","_ref","_regeneratorRuntime","mark","_callee","member","_this10$client9","wrap","_context","prev","next","membership","joinRoom","stop","_x","_x2","apply","startClient","initialSyncLimit","Adapter"],"mappings":"g1NAsBA,IAAaA,EAAb,SAAAC,GACE,SAAAD,EACEE,EACAC,EACAC,EACOC,GAA+B,IAAAC,EAAA,OAEtCA,EAAAL,EAAAM,KAAAC,KAAMN,EAAMC,EAAMC,IAAlBI,MAFOH,cAA+B,EAA/BC,EAAQD,SAARA,EAA+BC,CAGvC,CARH,OAAAG,EAAAT,EAAAC,GAAAD,CAAA,CAAA,CAAmCU,eAWtBC,EAAb,SAAAC,GAME,SAAAD,EAAoBE,GAAoB,IAAAC,EAAA,OACtCA,EAAAF,EAAAL,KAAAC,KAAMK,IAANL,MADkBK,WAAoB,EAAAC,EALjCC,YAKiC,EAAAD,EAJhCE,aAIgC,EAAAF,EAHhCG,kBAGgC,EAAAH,EAFhCI,eAEgC,EAApBJ,EAAKD,MAALA,EAElBC,EAAKD,MAAMM,OAAOC,KAAK,eAFeN,CAGvC,CATHL,EAAAE,EAAAC,GAAA,IAAAS,EAAAV,EAAAW,UAAA,OAAAD,EAWEE,qBAAA,SAAqBC,GAAsC,IAAAC,EAAAjB,KACzD,OAAQ,WACN,IAAIkB,EAAS,GACb,IAAK,IAAIC,KAAYH,EAAII,QAAS,CAChC,IAAIA,EAAUJ,EAAII,QAAQD,GAC1BD,EAAOG,KACJ,WACC,IAAIC,EAAU,GACd,IAAK,IAAIC,KAAUH,EAAS,CAAA,IAAAI,EAC1BP,EAAKZ,MAAMM,OAAOC,KAAlB,iBACmBO,EADnB,aACwCI,GAExCD,EAAQD,KAAK,OAAAG,EAAAP,EAAKV,aAAL,EAAAiB,EAAaC,eAAeN,EAAUI,GACpD,CACD,OAAOD,CART,CAAC,GAWJ,CACD,OAAOJ,CACR,CAlBO,IAZZL,EAiCEa,KAAA,SAAKC,GAAqC,IAAA,IAAAC,EAAA5B,KAAA6B,EAAAC,UAAAC,OAAdC,EAAc,IAAAC,MAAAJ,EAAA,EAAAA,EAAA,EAAA,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAdF,EAAcE,EAAA,GAAAJ,UAAAI,GACxC,OAAOF,EAAQG,KAAI,SAACC,GAAD,OAASR,EAAKS,aAAaV,OAAUW,EAAWF,EAAhD,KAlCvBvB,EAqCEwB,aAAA,SACEV,EACAY,EACAC,GAAe,IAAAC,EAMaC,EAAAC,EANbC,EAAA5C,KAGf,OADAA,KAAKK,MAAMM,OAAOC,mBAAmBe,EAASkB,KAA9C,KAAuDL,GACnD,oBAAoBM,KAAKN,GACpBxC,KAAK+C,QAAQpB,EAAUa,QAEfF,IAAbC,EACF,OAAAG,EAAO1C,KAAKO,gBAAZoC,EAAOD,EACHM,WAAWrB,EAASkB,KAAMN,EAAUC,SADxC,EAAOG,EAEG,OAAA,SAAC3B,GACgC,IAAAiC,EAAvC,GAAiB,uBAAbjC,EAAIkC,KAEN,OADAN,EAAK7B,qBAAqBC,GAC1B,OAAAiC,EAAOL,EAAKrC,aAAZ,EAAO0C,EAAaD,WAAWrB,EAASkB,KAAMN,EAAUC,EAE3D,IAEE,OAAPC,EAAOzC,KAAKO,aAAL,EAAAkC,EAAaO,WAAWrB,EAASkB,KAAML,GAAe,OAAA,SAACxB,GACrB,IAAAmC,EAAvC,GAAiB,uBAAbnC,EAAIkC,KAEN,OADAN,EAAK7B,qBAAqBC,GAC1B,OAAAmC,EAAOP,EAAKrC,aAAZ,EAAO4C,EAAaH,WAAWrB,EAASkB,KAAML,EAEjD,KA7DL3B,EAgEEuC,MAAA,SAAMzB,GAAwC,IAAA,IAAA0B,EAAArD,KAAAsD,EAAAxB,UAAAC,OAAjBC,EAAiB,IAAAC,MAAAqB,EAAA,EAAAA,EAAA,EAAA,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAjBvB,EAAiBuB,EAAA,GAAAzB,UAAAyB,GAC5C,OAAOtB,MAAMuB,KAAKxB,GAASG,KAAI,SAACC,GAAD,IAAAqB,EAAA,OAAA,OAAAA,EAC7BJ,EAAK9C,aADwB,EAC7BkD,EAAaC,iBAAiB/B,EAASkB,KAAMT,GAAW,OAAA,SAACpB,GAChB,IAAA2C,EAAvC,GAAiB,uBAAb3C,EAAIkC,KAEN,OADAG,EAAKtC,qBAAqBC,GAC1B,OAAA2C,EAAON,EAAK9C,aAAZ,EAAOoD,EAAaD,iBAAiB/B,EAASkB,KAAMT,EAEvD,GAN4B,KAjEnCvB,EA2EE+C,MAAA,SAAMjC,GAAwC,IAAA,IAAAkC,EAAA7D,KACxCuC,GACF,aAAcZ,EAASa,QAClBb,EAASa,QAA0B3C,SAAS0C,cAC7CD,GAJsCwB,EAAAhC,UAAAC,OAAjBC,EAAiB,IAAAC,MAAA6B,EAAA,EAAAA,EAAA,EAAA,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAjB/B,EAAiB+B,EAAA,GAAAjC,UAAAiC,GAM5C,OAAO9B,MAAMuB,KAAKxB,GAASG,KAAI,SAACC,GAAD,OAC7ByB,EAAKxB,aAAaV,EAAUY,EAAaZ,EAASjC,KAAKwD,KAAvD,KAAgEd,EADnC,KAjFnCvB,EAsFEmD,MAAA,SAAMrC,GAAwC,IAAA,IAAAsC,EAAAjE,KAAAkE,EAAApC,UAAAC,OAAjBC,EAAiB,IAAAC,MAAAiC,EAAA,EAAAA,EAAA,EAAA,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAjBnC,EAAiBmC,EAAA,GAAArC,UAAAqC,GAC5C,OAAOlC,MAAMuB,KAAKxB,GAASG,KAAI,SAACC,GAAD,IAAAgC,EAAA,OAAA,OAAAA,EAC7BH,EAAK1D,aADwB,EAC7B6D,EAAaC,eACX1C,EAASkB,KACT,eACA,CACEmB,MAAO5B,GAET,GAP2B,KAvFnCvB,EAmGEkC,QAAA,SAAQpB,EAAoB2C,GAAW,IAAAC,EAAAvE,KAErC,OADAA,KAAKK,MAAMM,OAAOC,oBAAoB0D,GAC/BE,UAAQ,CAAEF,IAAAA,EAAKG,SAAU,OAAQ,SAACC,EAAOC,EAAUC,GACxD,GAAIF,EACF,OAAOH,EAAKlE,MAAMM,OAAOC,KACLiE,kBAAAA,KAAKC,UAAUJ,IAGnC,IAAI9D,EADC,GAA4B,MAAxB+D,EAASI,WAElB,IAAI,IAAAC,EACEC,EAAOC,UAAON,GAalB,OAZAL,EAAKlE,MAAMM,OAAOC,KACQiE,wBAAAA,KAAKC,UAAUG,GAAeL,UAAAA,EAAK7C,QAE3C,QAAdkD,EAAKE,OACPF,EAAKE,KAAO,QAEdvE,EAAO,CACLwE,SAAQ,SAAWH,EAAKE,KACxBE,EAAGJ,EAAKK,OACRC,EAAGN,EAAKO,MACRC,KAAMb,EAAK7C,QAEb,OAAOiD,EAAAT,EAAKhE,aAAZ,EAAOyE,EACHU,cAAcd,EAAM,CACpB1B,KAAMoB,EACNa,KAAMvE,EAAKwE,SACXO,aAAa,EACbC,gBAAgB,IAEjBC,MAAK,SAACC,GAAe,IAAAC,EACpB,cAAAA,EAAOxB,EAAKhE,eAALwF,EACHC,iBAAiBrE,EAASkB,KAAMiD,EAAalF,EAAM0D,GAC9C,OAAA,SAACtD,GACiC,IAAAiF,EAAvC,GAAiB,uBAAbjF,EAAIkC,KAEN,OADAqB,EAAKxD,qBAAqBC,GACnB,OAAPiF,EAAO1B,EAAKhE,aAAL,EAAA0F,EAAaD,iBAClBrE,EAASkB,KACTiD,EACAlF,EACA0D,EAGL,GACJ,GAKJ,CAJC,MAAO4B,GAGP,OADA3B,EAAKlE,MAAMM,OAAOC,MADlB8D,EAAQwB,GACqB1D,SACtB+B,EAAK7C,KAAKC,EAAV,IAAwB2C,EAChC,CAEJ,KAtJLzD,EAyJEsF,IAAA,WAAG,IAAAC,EAAApG,KAMD,OALAA,KAAKK,MAAMM,OAAOC,KAAY,OAAAZ,KAAKK,MAAM6C,MAC5BmD,EAAG,QAACC,aAAa,CAC5BC,QAASC,QAAQC,IAAIC,0BAA4B,qBACjDlC,QAASA,EAAAA,UAEGmC,MACZ,mBACA,CACEjH,KAAM8G,QAAQC,IAAIG,mBAAqB5G,KAAKK,MAAM6C,KAClD2D,SAAUL,QAAQC,IAAIK,wBAExB,SACE9F,EACA+F,GACE,IAAAC,EAAAC,EAAAC,EAAAC,EACF,IAAInG,EAoFJ,OAhFAoF,EAAK5F,QAAUuG,EAAKvG,QACpB4F,EAAK3F,aAAesG,EAAKtG,aACzB2F,EAAK1F,UAAYqG,EAAKrG,UACtB0F,EAAK/F,MAAMM,OAAOC,KACH,aAAAwF,EAAK5F,QAAqB,cAAA4F,EAAK1F,WAE9C0F,EAAK7F,OAAS8F,EAAG,QAACC,aAAa,CAC7BC,QAASC,QAAQC,IAAIC,0BAA4B,qBACjDU,YAAahB,EAAK3F,aAClB4G,OAAQjB,EAAK5F,QACb8G,SAAUlB,EAAK1F,UACf8D,QAAAA,EAAAA,UAEF,OAAIwC,EAAAZ,EAAC7F,SAALyG,EAAaO,GAAGC,EAAAA,YAAYC,MAAM,SAACC,GAAS,IAAAC,EAAAC,EAAAC,EAAAC,EAC1C,GACO,aADCJ,EACN,CACEtB,EAAK/F,MAAMM,OAAOC,KACN,kBAAA+G,EAAAvB,EAAK7F,eAALoH,EAAaI,WAAWhG,kBAIpC,IAG4CiG,EAHtCC,SAAqBL,EAAAxB,EAAK7F,SAAR,SAAGqH,EAAaM,QAAb,OACzBJ,EAAA1B,EAAK5F,SADoBsH,EACT,YADSD,EAExBM,YAOH,OANI/B,EAAK/F,MAAM6C,OAAS+E,IACtB7B,EAAK/F,MAAMM,OAAOC,KAAlB,2BAC6BwF,EAAK/F,MAAM6C,MAE3BkF,OAAbJ,EAAA5B,EAAK7F,SAAQ6H,EAAAA,eAAehC,EAAK/F,MAAM6C,MAAM,WAA7C,KAEKkD,EAAKiC,KAAK,YAAjB,KAGOd,OAAbN,EAAAb,EAAK7F,SAAQgH,EAAAA,GACXe,EAASA,UAACC,UACV,SAACC,EAAO3F,EAAM4F,GACZ,GACsB,mBAApBD,EAAME,YACgB,IAAtBD,EACA,CAAA,IAAAE,EACaC,OAAbD,EAAAvC,EAAK7F,SAAQqI,EAAAA,YAAY,CAAEC,SAAU,WACrC,IAAIjJ,EAAK4I,EAAMM,QACXtG,EAAUgG,EAAMO,aAChB7F,EAAOsF,EAAMQ,YACbtJ,EAAO0G,EAAK/F,MAAM4I,MAAMC,UAAUhG,GAEtC,GADAxD,EAAKmD,KAAOA,EAAKsG,OACbjG,IAASkD,EAAK5F,QAAS,CAMzB,GALA4F,EAAK/F,MAAMM,OAAOC,KACKiE,qBAAAA,KAAKC,UAAUtC,GAClC9C,aAAAA,EAAKmD,KACInD,WAAAA,EAAKwD,KAHlB,KAG2BxD,EAAKE,GAHhC,MAKwB,WAApB4C,EAAQ4G,QAAsB,CAAA,IAAAC,EAC1BC,SAAkBd,EAAAA,EAAMe,gBAAgB3J,EAE9CwG,EAAKoD,QACH,IAAIhK,EAAcE,EAAM8C,EAAQoC,KAAMhF,EAAI,CACxC2C,SAAU+G,IAGf,CAIC,IAAAG,EAHF,GACsB,WAApBjH,EAAQ4G,UACmC,IAA3C5G,EAAQoC,KAAK8E,QAAQtD,EAAK/F,MAAM6C,MAEhC,OAAA,OAAOuG,EAAArD,EAAK7F,aAAZ,EAAOkJ,EAAaE,gBAAgBnB,EAEvC,CACF,KAGL,OAAAtB,EAAAd,EAAK7F,SAAL2G,EAAaK,GAAGqC,kBAAgBC,WAAhC,WAAA,MAA4CC,KAAAC,IAAAC,MAAA,SAAAC,EAAOzB,EAAO0B,GAAd,IAAAC,EAAA,OAAAJ,IAAAK,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,GAElB,WAAtBL,EAAOM,YACPN,EAAO7C,SAAWjB,EAAK5F,QAHiB,CAAA6J,EAAAE,KAAA,EAAA,KAAA,CAAA,OAAAF,EAAAE,KAAA,EAKlC,OAAAJ,EAAA/D,EAAK7F,aAAL,EAAA4J,EAAaM,SAASP,EAAOf,QALK,KAAA,EAMxC/C,EAAK/F,MAAMM,OAAOC,KAAlB,eAAsCsJ,EAAOf,QANL,KAAA,EAAA,IAAA,MAAA,OAAAkB,EAAAK,OAAA,GAAAT,EAA5C,mLAAA,OAAA,SAAAU,EAAAC,GAAA,OAAAd,EAAAe,MAAA7K,KAAA8B,UAAA,CAAA,CAAA,IASO,OAAPqF,EAAOf,EAAK7F,aAAL,EAAA4G,EAAa2D,YAAY,CAAEC,iBAAkB,IAnFlD3E,EAAK/F,MAAMM,OAAO+D,MAAM1D,EAoF3B,KA9PPb,CAAA,CAAA,CAA4B6K,gEAmQtB,SAAc3K,GAClB,OAAO,IAAIF,EAAOE,EACnB"}