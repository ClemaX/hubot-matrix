{"version":3,"file":"matrix.cjs.development.js","sources":["../src/matrix.ts"],"sourcesContent":["import { Robot, Adapter, Envelope, TextMessage, User } from \"hubot\";\nimport {\n  ClientEvent,\n  MatrixClient,\n  RoomEvent,\n  RoomMemberEvent,\n} from \"matrix-js-sdk\";\n\nimport sdk from \"matrix-js-sdk\";\nimport request from \"request\";\nimport sizeOf from \"image-size\";\n\n/**\n * The Matrix-specific metadata available about a message.\n */\nexport type MatrixMessageMetadata = {\n  readonly threadId: string;\n};\n\n/**\n * Represents a regular Hubot TextMessage with additional Matrix metadata.\n */\nexport class MatrixMessage extends TextMessage {\n  constructor(\n    user: User,\n    text: string,\n    id: string,\n    public metadata: MatrixMessageMetadata\n  ) {\n    super(user, text, id);\n  }\n}\n\nexport class Matrix extends Adapter {\n  private client: MatrixClient | undefined;\n  private user_id: string | undefined;\n  private access_token: string | undefined;\n  private device_id: string | undefined;\n\n  constructor(private robot: Robot<Matrix>) {\n    super(robot);\n    this.robot.logger.info(\"Constructor\");\n  }\n\n  handleUnknownDevices(err: { devices: { [x: string]: any } }) {\n    return (() => {\n      let result = [];\n      for (var stranger in err.devices) {\n        var devices = err.devices[stranger];\n        result.push(\n          (() => {\n            let result1 = [];\n            for (let device in devices) {\n              this.robot.logger.info(\n                `Acknowledging ${stranger}'s device ${device}`\n              );\n              result1.push(this.client?.setDeviceKnown(stranger, device));\n            }\n            return result1;\n          })()\n        );\n      }\n      return result;\n    })();\n  }\n\n  send(envelope: Envelope, ...strings: any[]): any {\n    return strings.map((str) => this.sendThreaded(envelope, undefined, str));\n  }\n\n  sendThreaded(\n    envelope: Envelope,\n    threadId: string | undefined,\n    message: string\n  ): any {\n    this.robot.logger.info(`Sending to ${envelope.room}: ${message}`);\n    if (/^(f|ht)tps?:\\/\\//i.test(message)) {\n      return this.sendURL(envelope, message);\n    }\n    if (threadId !== undefined) {\n      return this.client\n        ?.sendNotice(envelope.room, threadId, message)\n        ?.catch((err) => {\n          if (err.name === \"UnknownDeviceError\") {\n            this.handleUnknownDevices(err);\n            return this.client?.sendNotice(envelope.room, threadId, message);\n          }\n        });\n    }\n    return this.client?.sendNotice(envelope.room, message).catch((err) => {\n      if (err.name === \"UnknownDeviceError\") {\n        this.handleUnknownDevices(err);\n        return this.client?.sendNotice(envelope.room, message);\n      }\n    });\n  }\n\n  emote(envelope: Envelope, ...strings: string[]) {\n    return Array.from(strings).map((str) =>\n      this.client?.sendEmoteMessage(envelope.room, str).catch((err) => {\n        if (err.name === \"UnknownDeviceError\") {\n          this.handleUnknownDevices(err);\n          return this.client?.sendEmoteMessage(envelope.room, str);\n        }\n      })\n    );\n  }\n\n  reply(envelope: Envelope, ...strings: string[]) {\n    let threadId =\n      \"metadata\" in envelope.message\n        ? (envelope.message as MatrixMessage).metadata.threadId\n        : undefined;\n\n    return Array.from(strings).map((str) =>\n      this.sendThreaded(envelope, threadId, `${envelope.user.name}: ${str}`)\n    );\n  }\n\n  topic(envelope: Envelope, ...strings: string[]) {\n    return Array.from(strings).map((str) =>\n      this.client?.sendStateEvent(\n        envelope.room,\n        \"m.room.topic\",\n        {\n          topic: str,\n        },\n        \"\"\n      )\n    );\n  }\n\n  sendURL(envelope: Envelope, url: string) {\n    this.robot.logger.info(`Downloading ${url}`);\n    return request({ url, encoding: null }, (error, response, body) => {\n      if (error) {\n        return this.robot.logger.info(\n          `Request error: ${JSON.stringify(error)}`\n        );\n      } else if (response.statusCode === 200) {\n        let info: sdk.IImageInfo;\n        try {\n          let dims = sizeOf(body);\n          this.robot.logger.info(\n            `Image has dimensions ${JSON.stringify(dims)}, size ${body.length}`\n          );\n          if (dims.type === \"jpg\") {\n            dims.type = \"jpeg\";\n          }\n          info = {\n            mimetype: `image/${dims.type}`,\n            h: dims.height,\n            w: dims.width,\n            size: body.length,\n          };\n          return this.client\n            ?.uploadContent(body, {\n              name: url,\n              type: info.mimetype,\n              rawResponse: false,\n              onlyContentUri: true,\n            })\n            .then((content_uri) => {\n              return this.client\n                ?.sendImageMessage(envelope.room, content_uri, info, url)\n                .catch((err) => {\n                  if (err.name === \"UnknownDeviceError\") {\n                    this.handleUnknownDevices(err);\n                    return this.client?.sendImageMessage(\n                      envelope.room,\n                      content_uri,\n                      info,\n                      url\n                    );\n                  }\n                });\n            });\n        } catch (error1) {\n          error = error1;\n          this.robot.logger.info(error.message);\n          return this.send(envelope, ` ${url}`);\n        }\n      }\n    });\n  }\n\n  run() {\n    this.robot.logger.info(`Run ${this.robot.name}`);\n    let client = sdk.createClient({\n      baseUrl: process.env.HUBOT_MATRIX_HOST_SERVER || \"https://matrix.org\",\n      request: request,\n    });\n    return client.login(\n      \"m.login.password\",\n      {\n        user: process.env.HUBOT_MATRIX_USER || this.robot.name,\n        password: process.env.HUBOT_MATRIX_PASSWORD,\n      },\n      (\n        err: any,\n        data: { user_id: string; access_token: string; device_id: string }\n      ) => {\n        if (err) {\n          this.robot.logger.error(err);\n          return;\n        }\n        this.user_id = data.user_id;\n        this.access_token = data.access_token;\n        this.device_id = data.device_id;\n        this.robot.logger.info(\n          `Logged in ${this.user_id} on device ${this.device_id}`\n        );\n        this.client = sdk.createClient({\n          baseUrl: process.env.HUBOT_MATRIX_HOST_SERVER || \"https://matrix.org\",\n          accessToken: this.access_token,\n          userId: this.user_id,\n          deviceId: this.device_id,\n          request,\n        });\n        this.client?.on(ClientEvent.Sync, (state) => {\n          switch (state) {\n            case \"PREPARED\":\n              this.robot.logger.info(\n                `Synced ${this.client?.getRooms().length} rooms`\n              );\n              // We really don't want to let people set the display name to something other than the bot\n              // name because the bot only reacts to it's own name.\n              const currentDisplayName = this.client?.getUser(\n                this.user_id ?? \"\"\n              )?.displayName;\n              if (this.robot.name !== currentDisplayName) {\n                this.robot.logger.info(\n                  `Setting display name to ${this.robot.name}`\n                );\n                this.client?.setDisplayName(this.robot.name, () => {});\n              }\n              return this.emit(\"connected\");\n          }\n        });\n        this.client?.on(\n          RoomEvent.Timeline,\n          (event, room, toStartOfTimeline) => {\n            if (\n              event.getType() === \"m.room.message\" &&\n              toStartOfTimeline === false\n            ) {\n              this.client?.setPresence({ presence: \"online\" });\n              let id = event.getId();\n              let message = event.getContent();\n              let name = event.getSender();\n              let user = this.robot.brain.userForId(name);\n              user.room = room.roomId;\n              if (name !== this.user_id) {\n                this.robot.logger.info(\n                  `Received message: ${JSON.stringify(message)} in room: ${\n                    user.room\n                  }, from: ${user.name} (${user.id}).`\n                );\n                if (message.msgtype === \"m.text\") {\n                  const messageThreadId = event.threadRootId ?? id;\n\n                  this.receive(\n                    new MatrixMessage(user, message.body, id, {\n                      threadId: messageThreadId,\n                    })\n                  );\n                }\n                if (\n                  message.msgtype !== \"m.text\" ||\n                  message.body.indexOf(this.robot.name) !== -1\n                ) {\n                  return this.client?.sendReadReceipt(event);\n                }\n              }\n            }\n          }\n        );\n        this.client?.on(RoomMemberEvent.Membership, async (event, member) => {\n          if (\n            member.membership === \"invite\" &&\n            member.userId === this.user_id\n          ) {\n            await this.client?.joinRoom(member.roomId);\n            this.robot.logger.info(`Auto-joined ${member.roomId}`);\n          }\n        });\n        return this.client?.startClient({ initialSyncLimit: 0 });\n      }\n    );\n  }\n}\n\nexport function use(robot: Robot<any>): Matrix {\n  return new Matrix(robot);\n}\n"],"names":["MatrixMessage","user","text","id","metadata","TextMessage","Matrix","robot","client","user_id","access_token","device_id","logger","info","handleUnknownDevices","err","result","stranger","devices","push","result1","device","setDeviceKnown","send","envelope","strings","map","str","sendThreaded","undefined","threadId","message","room","test","sendURL","sendNotice","name","emote","Array","from","sendEmoteMessage","reply","topic","sendStateEvent","url","request","encoding","error","response","body","JSON","stringify","statusCode","dims","sizeOf","length","type","mimetype","h","height","w","width","size","uploadContent","rawResponse","onlyContentUri","then","content_uri","sendImageMessage","error1","run","sdk","createClient","baseUrl","process","env","HUBOT_MATRIX_HOST_SERVER","login","HUBOT_MATRIX_USER","password","HUBOT_MATRIX_PASSWORD","data","accessToken","userId","deviceId","on","ClientEvent","Sync","state","getRooms","currentDisplayName","getUser","displayName","setDisplayName","emit","RoomEvent","Timeline","event","toStartOfTimeline","getType","setPresence","presence","getId","getContent","getSender","brain","userForId","roomId","msgtype","messageThreadId","threadRootId","receive","indexOf","sendReadReceipt","RoomMemberEvent","Membership","member","membership","joinRoom","startClient","initialSyncLimit","Adapter","use"],"mappings":"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"}