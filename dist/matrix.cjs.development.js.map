{"version":3,"file":"matrix.cjs.development.js","sources":["../src/matrix.ts"],"sourcesContent":["import { Robot, Adapter, Envelope, TextMessage, User } from \"hubot\";\nimport {\n  ClientEvent,\n  MatrixClient,\n  RoomEvent,\n  RoomMemberEvent,\n} from \"matrix-js-sdk\";\n\nimport sdk from \"matrix-js-sdk\";\nimport request from \"request\";\nimport sizeOf from \"image-size\";\nimport { makeHtmlNotice, makeNotice } from \"matrix-js-sdk/lib/content-helpers\";\nimport { Parser, HtmlRenderer } from \"commonmark\";\n\n/**\n * The Matrix-specific metadata available about a message.\n */\nexport type MatrixMessageMetadata = {\n  readonly threadId?: string;\n  readonly interpretMarkdown?: boolean;\n};\n\n/**\n * Represents a regular Hubot TextMessage with additional Matrix metadata.\n */\nexport class MatrixMessage extends TextMessage {\n  constructor(\n    user: User,\n    text: string,\n    id: string,\n    public metadata: MatrixMessageMetadata\n  ) {\n    super(user, text, id);\n  }\n}\n\nexport class Matrix extends Adapter {\n  public client: MatrixClient | undefined;\n  private user_id: string | undefined;\n  private access_token: string | undefined;\n  private device_id: string | undefined;\n\n  private commonMarkReader = new Parser();\n  private commonMarkRenderer = new HtmlRenderer({ safe: true });\n\n  constructor(private robot: Robot<Matrix>) {\n    super(robot);\n    this.robot.logger.info(\"Constructor\");\n  }\n\n  handleUnknownDevices(err: { devices: { [x: string]: any } }) {\n    return (() => {\n      let result = [];\n      for (var stranger in err.devices) {\n        var devices = err.devices[stranger];\n        result.push(\n          (() => {\n            let result1 = [];\n            for (let device in devices) {\n              this.robot.logger.info(\n                `Acknowledging ${stranger}'s device ${device}`\n              );\n              result1.push(this.client?.setDeviceKnown(stranger, device));\n            }\n            return result1;\n          })()\n        );\n      }\n      return result;\n    })();\n  }\n\n  send(envelope: Envelope, ...strings: any[]) {\n    return strings.map((str) => this.sendThreaded(envelope, undefined, str));\n  }\n\n  sendThreaded(\n    envelope: Envelope,\n    threadId: string | undefined,\n    message: string\n  ): any {\n    const interpretMarkdown =\n      (\"metadata\" in (envelope.message ?? {}) &&\n        (envelope.message as MatrixMessage).metadata.interpretMarkdown) ??\n      true;\n\n    const finalMessage = interpretMarkdown\n      ? makeHtmlNotice(\n          message,\n          this.commonMarkRenderer.render(this.commonMarkReader.parse(message))\n        )\n      : makeNotice(message);\n\n    this.robot.logger.info(`Sending to ${envelope.room}: ${message}`);\n    if (/^(f|ht)tps?:\\/\\//i.test(message)) {\n      return this.sendURL(envelope, message);\n    }\n    if (threadId !== undefined) {\n      return this.client\n        ?.sendMessage(envelope.room, threadId, finalMessage)\n        ?.catch((err) => {\n          if (err.name === \"UnknownDeviceError\") {\n            this.handleUnknownDevices(err);\n            return this.client?.sendMessage(\n              envelope.room,\n              threadId,\n              finalMessage\n            );\n          }\n        });\n    }\n    return this.client\n      ?.sendMessage(envelope.room, finalMessage)\n      .catch((err) => {\n        if (err.name === \"UnknownDeviceError\") {\n          this.handleUnknownDevices(err);\n          return this.client?.sendMessage(envelope.room, finalMessage);\n        }\n      });\n  }\n\n  emote(envelope: Envelope, ...strings: string[]) {\n    return Array.from(strings).map((str) =>\n      this.client?.sendEmoteMessage(envelope.room, str).catch((err) => {\n        if (err.name === \"UnknownDeviceError\") {\n          this.handleUnknownDevices(err);\n          return this.client?.sendEmoteMessage(envelope.room, str);\n        }\n      })\n    );\n  }\n\n  reply(envelope: Envelope, ...strings: string[]) {\n    const threadId =\n      \"metadata\" in envelope.message\n        ? (envelope.message as MatrixMessage).metadata.threadId\n        : undefined;\n\n    return Array.from(strings).map((str) =>\n      this.sendThreaded(envelope, threadId, `${envelope.user.name}: ${str}`)\n    );\n  }\n\n  topic(envelope: Envelope, ...strings: string[]) {\n    return Array.from(strings).map((str) =>\n      this.client?.sendStateEvent(\n        envelope.room,\n        \"m.room.topic\",\n        {\n          topic: str,\n        },\n        \"\"\n      )\n    );\n  }\n\n  sendURL(envelope: Envelope, url: string) {\n    this.robot.logger.info(`Downloading ${url}`);\n    return request({ url, encoding: null }, (error, response, body) => {\n      if (error) {\n        return this.robot.logger.info(\n          `Request error: ${JSON.stringify(error)}`\n        );\n      } else if (response.statusCode === 200) {\n        let info: sdk.IImageInfo;\n        try {\n          let dims = sizeOf(body);\n          this.robot.logger.info(\n            `Image has dimensions ${JSON.stringify(dims)}, size ${body.length}`\n          );\n          if (dims.type === \"jpg\") {\n            dims.type = \"jpeg\";\n          }\n          info = {\n            mimetype: `image/${dims.type}`,\n            h: dims.height,\n            w: dims.width,\n            size: body.length,\n          };\n          return this.client\n            ?.uploadContent(body, {\n              name: url,\n              type: info.mimetype,\n              rawResponse: false,\n              onlyContentUri: true,\n            })\n            .then((content_uri) => {\n              return this.client\n                ?.sendImageMessage(envelope.room, content_uri, info, url)\n                .catch((err) => {\n                  if (err.name === \"UnknownDeviceError\") {\n                    this.handleUnknownDevices(err);\n                    return this.client?.sendImageMessage(\n                      envelope.room,\n                      content_uri,\n                      info,\n                      url\n                    );\n                  }\n                });\n            });\n        } catch (error1) {\n          error = error1;\n          this.robot.logger.info(error.message);\n          return this.send(envelope, ` ${url}`);\n        }\n      }\n    });\n  }\n\n  run() {\n    this.robot.logger.info(`Run ${this.robot.name}`);\n    let client = sdk.createClient({\n      baseUrl: process.env.HUBOT_MATRIX_HOST_SERVER || \"https://matrix.org\",\n      request: request,\n    });\n    return client.login(\n      \"m.login.password\",\n      {\n        user: process.env.HUBOT_MATRIX_USER || this.robot.name,\n        password: process.env.HUBOT_MATRIX_PASSWORD,\n      },\n      (\n        err: any,\n        data: { user_id: string; access_token: string; device_id: string }\n      ) => {\n        if (err) {\n          this.robot.logger.error(err);\n          return;\n        }\n        this.user_id = data.user_id;\n        this.access_token = data.access_token;\n        this.device_id = data.device_id;\n        this.robot.logger.info(\n          `Logged in ${this.user_id} on device ${this.device_id}`\n        );\n        this.client = sdk.createClient({\n          baseUrl: process.env.HUBOT_MATRIX_HOST_SERVER || \"https://matrix.org\",\n          accessToken: this.access_token,\n          userId: this.user_id,\n          deviceId: this.device_id,\n          request,\n        });\n        this.client?.on(ClientEvent.Sync, (state) => {\n          switch (state) {\n            case \"PREPARED\":\n              this.robot.logger.info(\n                `Synced ${this.client?.getRooms().length} rooms`\n              );\n              // We really don't want to let people set the display name to something other than the bot\n              // name because the bot only reacts to it's own name.\n              const currentDisplayName = this.client?.getUser(\n                this.user_id ?? \"\"\n              )?.displayName;\n              if (this.robot.name !== currentDisplayName) {\n                this.robot.logger.info(\n                  `Setting display name to ${this.robot.name}`\n                );\n                this.client?.setDisplayName(this.robot.name, () => {});\n              }\n              return this.emit(\"connected\");\n          }\n        });\n        this.client?.on(\n          RoomEvent.Timeline,\n          (event, room, toStartOfTimeline) => {\n            if (\n              event.getType() === \"m.room.message\" &&\n              toStartOfTimeline === false\n            ) {\n              this.client?.setPresence({ presence: \"online\" });\n              let id = event.getId();\n              let message = event.getContent();\n              let name = event.getSender();\n              let user = this.robot.brain.userForId(name);\n              user.room = room.roomId;\n              if (name !== this.user_id) {\n                this.robot.logger.info(\n                  `Received message: ${JSON.stringify(message)} in room: ${\n                    user.room\n                  }, from: ${user.name} (${user.id}).`\n                );\n                if (message.msgtype === \"m.text\") {\n                  const messageThreadId = event.threadRootId ?? id;\n\n                  this.receive(\n                    new MatrixMessage(user, message.body, id, {\n                      threadId: messageThreadId,\n                    })\n                  );\n                }\n                if (\n                  message.msgtype !== \"m.text\" ||\n                  message.body.indexOf(this.robot.name) !== -1\n                ) {\n                  return this.client?.sendReadReceipt(event);\n                }\n              }\n            }\n          }\n        );\n        this.client?.on(RoomMemberEvent.Membership, async (event, member) => {\n          if (\n            member.membership === \"invite\" &&\n            member.userId === this.user_id\n          ) {\n            await this.client?.joinRoom(member.roomId);\n            this.robot.logger.info(`Auto-joined ${member.roomId}`);\n          }\n        });\n        return this.client?.startClient({ initialSyncLimit: 0 });\n      }\n    );\n  }\n}\n\nexport function use(robot: Robot<any>): Matrix {\n  return new Matrix(robot);\n}\n"],"names":["MatrixMessage","user","text","id","metadata","TextMessage","Matrix","robot","client","user_id","access_token","device_id","commonMarkReader","Parser","commonMarkRenderer","HtmlRenderer","safe","logger","info","handleUnknownDevices","err","result","stranger","devices","push","result1","device","setDeviceKnown","send","envelope","strings","map","str","sendThreaded","undefined","threadId","message","interpretMarkdown","finalMessage","makeHtmlNotice","render","parse","makeNotice","room","test","sendURL","sendMessage","name","emote","Array","from","sendEmoteMessage","reply","topic","sendStateEvent","url","request","encoding","error","response","body","JSON","stringify","statusCode","dims","sizeOf","length","type","mimetype","h","height","w","width","size","uploadContent","rawResponse","onlyContentUri","then","content_uri","sendImageMessage","error1","run","sdk","createClient","baseUrl","process","env","HUBOT_MATRIX_HOST_SERVER","login","HUBOT_MATRIX_USER","password","HUBOT_MATRIX_PASSWORD","data","accessToken","userId","deviceId","on","ClientEvent","Sync","state","getRooms","currentDisplayName","getUser","displayName","setDisplayName","emit","RoomEvent","Timeline","event","toStartOfTimeline","getType","setPresence","presence","getId","getContent","getSender","brain","userForId","roomId","msgtype","messageThreadId","threadRootId","receive","indexOf","sendReadReceipt","RoomMemberEvent","Membership","member","membership","joinRoom","startClient","initialSyncLimit","Adapter","use"],"mappings":"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"}