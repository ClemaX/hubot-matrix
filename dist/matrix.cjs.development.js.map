{"version":3,"file":"matrix.cjs.development.js","sources":["../src/matrix.ts"],"sourcesContent":["import { Robot, Adapter, Envelope, TextMessage, User } from \"hubot\";\nimport {\n  ClientEvent,\n  ISendEventResponse,\n  MatrixClient,\n  RoomEvent,\n  RoomMemberEvent,\n} from \"matrix-js-sdk\";\n\nimport sdk from \"matrix-js-sdk\";\nimport request from \"request\";\nimport sizeOf from \"image-size\";\nimport { makeHtmlNotice, makeNotice } from \"matrix-js-sdk/lib/content-helpers\";\nimport { Parser, HtmlRenderer } from \"commonmark\";\n\n/**\n * The Matrix-specific metadata available about a message.\n */\nexport type MatrixMessageMetadata = {\n  readonly threadId?: string;\n  readonly interpretMarkdown?: boolean;\n};\n\n/**\n * Represents a regular Hubot TextMessage with additional Matrix metadata.\n */\nexport class MatrixMessage extends TextMessage {\n  constructor(\n    user: User,\n    text: string,\n    id: string,\n    public metadata: MatrixMessageMetadata\n  ) {\n    super(user, text, id);\n  }\n}\n\nexport class Matrix extends Adapter {\n  public client: MatrixClient | undefined;\n  private user_id: string | undefined;\n  private access_token: string | undefined;\n  private device_id: string | undefined;\n\n  private commonMarkReader = new Parser();\n  private commonMarkRenderer = new HtmlRenderer({ safe: true });\n\n  constructor(private robot: Robot<Matrix>) {\n    super(robot);\n    this.robot.logger.info(\"Constructor\");\n  }\n\n  handleUnknownDevices(err: { devices: { [x: string]: any } }) {\n    return (() => {\n      let result = [];\n      for (var stranger in err.devices) {\n        var devices = err.devices[stranger];\n        result.push(\n          (() => {\n            let result1 = [];\n            for (let device in devices) {\n              this.robot.logger.info(\n                `Acknowledging ${stranger}'s device ${device}`\n              );\n              result1.push(this.client?.setDeviceKnown(stranger, device));\n            }\n            return result1;\n          })()\n        );\n      }\n      return result;\n    })();\n  }\n\n  send(envelope: Envelope, ...strings: any[]) {\n    return strings.map((str) => this.sendThreaded(envelope, undefined, str));\n  }\n\n  async resolveRoom(room: string): Promise<string> {\n    const roomFromId = this.client?.getRoom(room)\n    if (roomFromId !== null && roomFromId !== undefined) {\n      return room\n    }\n\n    const roomIdFromAlias = (await this.client?.getRoomIdForAlias(room))?.room_id\n    if (roomIdFromAlias === undefined) {\n      throw new Error(`Failed to resolve specified room: ${room}.`)\n    }\n\n    return roomIdFromAlias\n  }\n\n  async sendThreaded(\n    envelope: Envelope,\n    threadId: string | undefined,\n    message: string\n  ): Promise<ISendEventResponse | undefined> {\n    const resolvedRoom = await this.resolveRoom(envelope.room)\n\n    const interpretMarkdown =\n      \"metadata\" in (envelope.message ?? {})\n        ? (envelope.message as MatrixMessage).metadata.interpretMarkdown ?? true\n        : true;\n\n    const finalMessage = interpretMarkdown\n      ? makeHtmlNotice(\n          message,\n          this.commonMarkRenderer.render(this.commonMarkReader.parse(message))\n        )\n      : makeNotice(message);\n\n    this.robot.logger.info(`Sending to ${envelope.room} (resolved to ${resolvedRoom}): ${message}`);\n    if (/^(f|ht)tps?:\\/\\//i.test(message)) {\n      return this.sendURL(envelope, message);\n    }\n    if (threadId !== undefined) {\n      return this.client\n        ?.sendMessage(resolvedRoom, threadId, finalMessage)\n        ?.catch((err) => {\n          if (err.name === \"UnknownDeviceError\") {\n            this.handleUnknownDevices(err);\n            return this.client?.sendMessage(\n              resolvedRoom,\n              threadId,\n              finalMessage\n            );\n          }\n        });\n    }\n    return this.client\n      ?.sendMessage(resolvedRoom, finalMessage)\n      .catch((err) => {\n        if (err.name === \"UnknownDeviceError\") {\n          this.handleUnknownDevices(err);\n          return this.client?.sendMessage(resolvedRoom, finalMessage);\n        }\n      });\n  }\n\n  async emote(envelope: Envelope, ...strings: string[]) {\n    const resolvedRoom = await this.resolveRoom(envelope.room)\n\n    return Array.from(strings).map((str) =>\n      this.client?.sendEmoteMessage(resolvedRoom, str).catch((err) => {\n        if (err.name === \"UnknownDeviceError\") {\n          this.handleUnknownDevices(err);\n          return this.client?.sendEmoteMessage(resolvedRoom, str);\n        }\n      })\n    );\n  }\n\n  reply(envelope: Envelope, ...strings: string[]) {\n    const threadId =\n      \"metadata\" in envelope.message\n        ? (envelope.message as MatrixMessage).metadata.threadId\n        : undefined;\n\n    return Array.from(strings).map((str) =>\n      this.sendThreaded(envelope, threadId, `${envelope.user.name}: ${str}`)\n    );\n  }\n\n  topic(envelope: Envelope, ...strings: string[]) {\n    return Array.from(strings).map((str) =>\n      this.client?.sendStateEvent(\n        envelope.room,\n        \"m.room.topic\",\n        {\n          topic: str,\n        },\n        \"\"\n      )\n    );\n  }\n\n  async sendURL(\n    envelope: Envelope,\n    url: string\n  ): Promise<ISendEventResponse | undefined> {\n    const resolvedRoom = await this.resolveRoom(envelope.room)\n\n    this.robot.logger.info(`Downloading ${url}`);\n    return new Promise((resolve, reject) => {\n      request({ url, encoding: null }, (error, response, body) => {\n        if (error) {\n          this.robot.logger.info(`Request error: ${JSON.stringify(error)}`);\n          reject(error);\n        } else if (response.statusCode === 200) {\n          let info: sdk.IImageInfo;\n          try {\n            let dims = sizeOf(body);\n            this.robot.logger.info(\n              `Image has dimensions ${JSON.stringify(dims)}, size ${\n                body.length\n              }`\n            );\n            if (dims.type === \"jpg\") {\n              dims.type = \"jpeg\";\n            }\n            info = {\n              mimetype: `image/${dims.type}`,\n              h: dims.height,\n              w: dims.width,\n              size: body.length,\n            };\n            resolve(\n              this.client\n                ?.uploadContent(body, {\n                  name: url,\n                  type: info.mimetype,\n                  rawResponse: false,\n                  onlyContentUri: true,\n                })\n                .then((content_uri) => {\n                  return this.client\n                    ?.sendImageMessage(resolvedRoom, content_uri, info, url)\n                    .catch((err) => {\n                      if (err.name === \"UnknownDeviceError\") {\n                        this.handleUnknownDevices(err);\n                        return this.client?.sendImageMessage(\n                          resolvedRoom,\n                          content_uri,\n                          info,\n                          url\n                        );\n                      }\n                    });\n                })\n            );\n          } catch (error1) {\n            error = error1;\n            this.robot.logger.info(error.message);\n            resolve(this.sendThreaded(envelope, undefined, ` ${url}`));\n          }\n        }\n      });\n    });\n  }\n\n  run() {\n    this.robot.logger.info(`Run ${this.robot.name}`);\n    let client = sdk.createClient({\n      baseUrl: process.env.HUBOT_MATRIX_HOST_SERVER || \"https://matrix.org\",\n      request: request,\n    });\n    return client.login(\n      \"m.login.password\",\n      {\n        user: process.env.HUBOT_MATRIX_USER || this.robot.name,\n        password: process.env.HUBOT_MATRIX_PASSWORD,\n      },\n      (\n        err: any,\n        data: { user_id: string; access_token: string; device_id: string }\n      ) => {\n        if (err) {\n          this.robot.logger.error(err);\n          return;\n        }\n        this.user_id = data.user_id;\n        this.access_token = data.access_token;\n        this.device_id = data.device_id;\n        this.robot.logger.info(\n          `Logged in ${this.user_id} on device ${this.device_id}`\n        );\n        this.client = sdk.createClient({\n          baseUrl: process.env.HUBOT_MATRIX_HOST_SERVER || \"https://matrix.org\",\n          accessToken: this.access_token,\n          userId: this.user_id,\n          deviceId: this.device_id,\n          request,\n        });\n        this.client?.on(ClientEvent.Sync, (state) => {\n          switch (state) {\n            case \"PREPARED\":\n              this.robot.logger.info(\n                `Synced ${this.client?.getRooms().length} rooms`\n              );\n              // We really don't want to let people set the display name to something other than the bot\n              // name because the bot only reacts to it's own name.\n              const currentDisplayName = this.client?.getUser(\n                this.user_id ?? \"\"\n              )?.displayName;\n              if (this.robot.name !== currentDisplayName) {\n                this.robot.logger.info(\n                  `Setting display name to ${this.robot.name}`\n                );\n                this.client?.setDisplayName(this.robot.name, () => {});\n              }\n              return this.emit(\"connected\");\n          }\n        });\n        this.client?.on(\n          RoomEvent.Timeline,\n          (event, room, toStartOfTimeline) => {\n            if (\n              event.getType() === \"m.room.message\" &&\n              toStartOfTimeline === false\n            ) {\n              this.client?.setPresence({ presence: \"online\" });\n              let id = event.getId();\n              let message = event.getContent();\n              let name = event.getSender();\n              let user = this.robot.brain.userForId(name);\n              user.room = room.getCanonicalAlias() ?? room.roomId;\n              if (name !== this.user_id) {\n                this.robot.logger.info(\n                  `Received message: ${JSON.stringify(message)} in room: ${\n                    user.room\n                  }, from: ${user.name} (${user.id}).`\n                );\n                if (message.msgtype === \"m.text\") {\n                  const messageThreadId = event.threadRootId ?? id;\n\n                  this.receive(\n                    new MatrixMessage(user, message.body, id, {\n                      threadId: messageThreadId,\n                    })\n                  );\n                }\n                if (\n                  message.msgtype !== \"m.text\" ||\n                  message.body.indexOf(this.robot.name) !== -1\n                ) {\n                  return this.client?.sendReadReceipt(event);\n                }\n              }\n            }\n          }\n        );\n        this.client?.on(RoomMemberEvent.Membership, async (event, member) => {\n          if (\n            member.membership === \"invite\" &&\n            member.userId === this.user_id\n          ) {\n            await this.client?.joinRoom(member.roomId);\n            this.robot.logger.info(`Auto-joined ${member.roomId}`);\n          }\n        });\n        return this.client?.startClient({ initialSyncLimit: 0 });\n      }\n    );\n  }\n}\n\nexport function use(robot: Robot<any>): Matrix {\n  return new Matrix(robot);\n}\n"],"names":["MatrixMessage","user","text","id","metadata","TextMessage","Matrix","robot","client","user_id","access_token","device_id","commonMarkReader","Parser","commonMarkRenderer","HtmlRenderer","safe","logger","info","handleUnknownDevices","err","result","stranger","devices","push","result1","device","setDeviceKnown","send","envelope","strings","map","str","sendThreaded","undefined","resolveRoom","room","roomFromId","getRoom","getRoomIdForAlias","room_id","roomIdFromAlias","Error","threadId","message","resolvedRoom","interpretMarkdown","finalMessage","makeHtmlNotice","render","parse","makeNotice","test","sendURL","sendMessage","name","emote","Array","from","sendEmoteMessage","reply","topic","sendStateEvent","url","Promise","resolve","reject","request","encoding","error","response","body","JSON","stringify","statusCode","dims","sizeOf","length","type","mimetype","h","height","w","width","size","uploadContent","rawResponse","onlyContentUri","then","content_uri","sendImageMessage","error1","run","sdk","createClient","baseUrl","process","env","HUBOT_MATRIX_HOST_SERVER","login","HUBOT_MATRIX_USER","password","HUBOT_MATRIX_PASSWORD","data","accessToken","userId","deviceId","on","ClientEvent","Sync","state","getRooms","currentDisplayName","getUser","displayName","setDisplayName","emit","RoomEvent","Timeline","event","toStartOfTimeline","getType","setPresence","presence","getId","getContent","getSender","brain","userForId","getCanonicalAlias","roomId","msgtype","messageThreadId","threadRootId","receive","indexOf","sendReadReceipt","RoomMemberEvent","Membership","member","membership","joinRoom","startClient","initialSyncLimit","Adapter","use"],"mappings":"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"}